/sdg_root is the source-folder of the project: we are 17

- docker-compose.yml
services:
  api_service:
    build: ${SRC_ROOT}/api
    container_name: api_service
    ports:
      - "8000:8000"
    volumes:
      - ${SRC_ROOT}/api:/app
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      database_service:
        condition: service_healthy
    command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'

  database_service:
    image: postgres:16-alpine
    container_name: database_service
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-sdg_pipeline}
      - POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    volumes:
      - ${DATABASE_SERVICE_VOLUMES}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'

  weaviate_service:
    # profiles: ["vector"]
    image: semitechnologies/weaviate:1.24.1
    container_name: weaviate_service
    ports:
      - "8080:8080"
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - DEFAULT_VECTORIZER_MODULE=text2vec-transformers
      - ENABLE_MODULES=text2vec-transformers
      - TRANSFORMERS_INFERENCE_API=http://weaviate_transformer_service:8080
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - CLUSTER_HOSTNAME=node1
      - MODULES_CLIENT_TIMEOUT=600s
    volumes:
      - ${WEAVIATE_SERVICE_VOLUMES}
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost:8080/v1/meta || exit 1"] 
      interval: 30s
      timeout: 20s
      retries: 20
      start_period: 600s
    depends_on:
      weaviate_transformer_service:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'    
          memory: '4G'   
        reservations:
          memory: '2G'
    
  weaviate_transformer_service:
    # profiles: ["vector"]
    image: ${WEAVIATE_IMAGE}
    container_name: weaviate_transformer_service
    ports:
      - "8081:8080"
    environment:
      - ENABLE_GPU=0
      - TORCH_NUM_THREADS=4               
      - OMP_NUM_THREADS=4
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:8080/.well-known/ready\").read()' || exit 1"]
      interval: 45s
      timeout: 30s
      retries: 25
      start_period: 600s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: '8G'
        reservations:
          memory: '4G'

  vectorization_service:
    build: ${SRC_ROOT}/vectorization
    container_name: vectorization_service
    ports:
      - "8003:8003"
    volumes:
      - ${SRC_ROOT}/vectorization:/app
    environment:
      - WEAVIATE_URL=${WEAVIATE_URL}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      weaviate_service:
        condition: service_healthy
    command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  
  data_retrieval_service:
    build: ${SRC_ROOT}/data_retrieval
    container_name: data_retrieval_service
    ports:
      - "8002:8002"
    volumes:
      - ${SRC_ROOT}/data_retrieval:/app
      - ${DATA_ROOT}/raw_data:/app/raw_data
      - ${DATA_ROOT}/quelle.txt:/app/quelle.txt
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      database_service:
        condition: service_healthy
    command: python main.py
    deploy:
      resources:
        limits:
          cpus: '1.0'

  data_processing_service:
    # profiles: ["processing"]
    build: ${SRC_ROOT}/data_processing
    container_name: data_processing_service
    ports:
      - "8001:8001"
    volumes:
      - ${SRC_ROOT}/data_processing:/app
      - ${DATA_ROOT}/raw_data:/app/raw_data
      - ${DATA_ROOT}/processed_data:/app/processed_data
      - ${DATA_ROOT}/images:/app/images
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WEAVIATE_URL=${WEAVIATE_URL}
    depends_on:
      data_retrieval_service:
        condition: service_started
      database_service:
        condition: service_healthy
      weaviate_service:
        condition: service_healthy
      weaviate_transformer_service:
        condition: service_healthy
    command: python main.py
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: '4G'
        reservations:
          cpus: '2'
          memory: '3G'
  
  content_extraction_service:
  build: ${SRC_ROOT}/content_extraction
  container_name: content_extraction_service
  ports:
    - "8004:8004"
  volumes:
    - ${SRC_ROOT}/content_extraction:/app
  environment:
    - DATABASE_URL=${DATABASE_URL}
    - DATA_PROCESSING_URL=http://data_processing_service:8001
    - API_SERVICE_URL=http://api_service:8000
  depends_on:
    database_service:
      condition: service_healthy
  command: python -m uvicorn main:app --host 0.0.0.0 --port 8004 --reload
  deploy:
    resources:
      limits:
        cpus: '1.0'
        memory: '2G'
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
    interval: 30s
    timeout: 10s
    retries: 3

  pgadmin_service:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_service
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    volumes:
      - ${PGADMIN_VOLUMES}
    depends_on:
      database_service:
        condition: service_healthy
    user: "5050:5050"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
  
  weaviate_console:
    image: semitechnologies/weaviate-console
    container_name: weaviate_console
    ports:
      - "3001:3000"
    environment:
      - WEAVIATE_HOST=weaviate_service:8080
    depends_on:
      weaviate_service:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '256M'
  
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    
    
-- Dockerfile
    
    # Basierend auf dem offiziellen Transformer-Inference-Image
FROM cr.weaviate.io/semitechnologies/transformers-inference:sentence-transformers-multi-qa-MiniLM-L6-cos-v1

# Temporär als root, um Pakete zu installieren (bei Minimal-Images oft Standard)
USER root

# Installiere Debug- und Diagnose-Tools
# Für Debian/Ubuntu-Basis (bei den meisten KI-Images Standard)
RUN apt-get update && apt-get install -y wget curl

# Optional: weitere Tools für wissenschaftliches Debuggen
# RUN apt-get install -y procps net-tools

# (Falls benötigt:) Wechsle zurück zum originalen Nutzer, der App ausführt
# In Weaviate-Images ist meist root default, dann kann die Zeile entfallen
# USER hwe

# Keine CMD nötig – wird vom Baseimage geerbt

-- requirements.txt

fastapi
uvicorn[standard]
python-dotenv
  

-- .env
# roots
DATA_ROOT=/mnt/gigabyte1tb/SDG/sdg_root/data
SRC_ROOT=./src

# Database Configuration
POSTGRES_USER=sdg_service
POSTGRES_PASSWORD=g^RB}?%zlNQ$[&Rz'%_P!'Y7EtC!!yD
POSTGRES_DB=sdg_pipeline
DATABASE_URL=postgresql://sdg_service:g^RB}?%zlNQ$[&Rz'%_P!'Y7EtC!!yD@database_service:5432/sdg_pipeline
DATABASE_SERVICE_VOLUMES=/mnt/gigabyte1tb/SDG/sdg_root/data/postgres_data:/var/lib/postgresql/data

# pgadmin: Additional settings
PGADMIN_DEFAULT_EMAIL=heinrich.ekam@gmail.com
PGADMIN_VOLUMES=/mnt/gigabyte1tb/SDG/sdg_root/data/pgadmin_data:/var/lib/pgadmin

# weaviate: additional settings
WEAVIATE_SERVICE_VOLUMES=/mnt/gigabyte1tb/SDG/sdg_root/data/weaviate_data:/var/lib/weaviate
WEAVIATE_URL=http://weaviate_service:8080
WEAVIATE_API_KEY=
WEAVIATE_IMAGE=semitechnologies/transformers-inference:sentence-transformers-multi-qa-MiniLM-L6-cos-v1

OPENAI_API_KEY=

REDIS_URL=redis://localhost:6379

API_SERVICE_URL=http://localhost:8000
DATA_PROCESSING_URL=http://localhost:8001  
DATA_RETRIEVAL_URL=http://localhost:8002
VECTORIZATION_SERVICE_URL=http://localhost:8003

LOG_LEVEL=INFO
DEBUG=false
ENVIRONMENT=development

SUPPORTED_REGIONS=EU,China,India,USA,ASEAN,BRICS
SUPPORTED_LANGUAGES=en,de,fr,es,zh,hi

SDG_CLASSIFICATION_CONFIDENCE_THRESHOLD=0.7
MAX_SDGS_PER_ARTICLE=5
ENABLE_INTERLINKAGE_ANALYSIS=true

MAX_WORKERS=4
BATCH_SIZE=100
CACHE_TTL=3600

SECRET_KEY=your_secret_key_here
API_KEY_EXPIRY_DAYS=30
RATE_LIMIT_PER_MINUTE=60

