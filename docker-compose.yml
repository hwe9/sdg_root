networks:
  sdg_internal:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
  sdg_external:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
  monitoring_network:
    driver: bridge
    internal: true

services:
  nginx_proxy:
    image: nginx:1.25-alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${SRC_ROOT}/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ${SRC_ROOT}/nginx/ssl:/etc/ssl/certs:ro
      - ${SRC_ROOT}/nginx/logs:/var/log/nginx
    networks:
      - sdg_external
      - sdg_internal
    depends_on:
      auth_service:
        condition: service_healthy
      api_service:
        condition: service_healthy
    environment:
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:80/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  auth_service:
    build:
      context: ${SRC_ROOT}
      dockerfile: src/auth/Dockerfile
    container_name: auth_service
    restart: unless-stopped
    expose:
      - "8005"
    volumes:
      - ${SRC_ROOT}:/app:ro
      - ${DATA_ROOT}/secrets:/data/secrets
      - ${DATA_ROOT}/config:/data/config
    environment:
      - PYTHONPATH=/app
      - CONFIG_DIR=/data/config
      - REDIS_URL=${REDIS_URL}
      - SECRET_STORE_DIR=/data/secrets
      - SECRET_KEY=${SECRET_KEY}
      - SECRET_KEY_ENCRYPTED=${SECRET_KEY_ENCRYPTED:-}
      - ENCRYPTION_SALT=${ENCRYPTION_SALT}
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_URL_ENCRYPTED=${DATABASE_URL_ENCRYPTED:-}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - ENVIRONMENT=${ENVIRONMENT}
      - SERVICE_NAME=auth
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
      - CONTENT_EXTRACTION_URL=http://content_extraction_service:8004
    networks:
      - sdg_internal
    depends_on:
      database_service:
        condition: service_healthy
      db_bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      content_extraction_service:
        condition: service_healthy
    command: ["python", "-m", "uvicorn", "src.auth.main:app", "--host", "0.0.0.0", "--port", "8005"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  api_service:
    build:
      context: ${SRC_ROOT}
      dockerfile: src/api/Dockerfile
      args:
        - BUILD_ENV=production
    container_name: api_service
    restart: unless-stopped
    ports:
      - "8000:8000"
    expose:
      - "8000"
    volumes:
      - ${SRC_ROOT}:/app:ro
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - WEAVIATE_URL=${WEAVIATE_URL}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=INFO
      - WORKERS=4
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    networks:
      - sdg_internal
      - sdg_external
    depends_on:
      database_service:
        condition: service_healthy
      db_bootstrap:
        condition: service_completed_successfully
      auth_service:
        condition: service_healthy
      weaviate_service:
        condition: service_healthy
      weaviate_transformer_service:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "-m", "uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/live"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G

  database_service:
    image: postgres:16-alpine
    container_name: database_service
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-sdg_pipeline}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=en_US.UTF-8
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    volumes:
      - ${DATABASE_SERVICE_VOLUMES}
      - ${SRC_ROOT}/postgres/init:/docker-entrypoint-initdb.d:ro
      - ${SRC_ROOT}/postgres/backup:/backup
    networks:
      - sdg_internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "1.0"
          memory: 2G

  db_bootstrap:
    image: postgres:16-alpine
    depends_on:
      database_service:
        condition: service_healthy
    environment:
      - PGHOST=database_service
      - PGPORT=5432
      - PGUSER=${POSTGRES_USER:-postgres}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - APP_DB_NAME=${POSTGRES_DB:-sdg_pipeline}
      - APP_DB_USER=sdg_service
      - APP_DB_PASSWORD=${APP_DB_PASSWORD}
    volumes:
      - ${SRC_ROOT}/src/api:/bootstrap:ro
    command:
      - sh
      - -lc
      - |
        set -euo pipefail
        [ -f /bootstrap/db_bootstrap.sql ] || { echo "db_bootstrap: /bootstrap/db_bootstrap.sql fehlt oder ist kein File"; ls -l /bootstrap; exit 1; }

        psql -h "$PGHOST" -U "$PGUSER" -d postgres \
          --set=ON_ERROR_STOP=1 \
          --set=u="${APP_DB_USER}" \
          --set=d="${APP_DB_NAME}" \
          --set=p="${APP_DB_PASSWORD}" \
          -f /bootstrap/db_bootstrap.sql
        echo "Bootstrap completed."
    restart: "no"
    networks:
      - sdg_internal
  
  weaviate_transformer_service:
    image: ${WEAVIATE_IMAGE}              # z.B. semitechnologies/transformers-inference:sentence-transformers-paraphrase-multilingual-MiniLM-L12-v2
    container_name: weaviate_transformer_service
    restart: unless-stopped
    ports:
      - "127.0.0.1:8081:8080"             # optional: nur für lokalen Zugriff vom Host nötig
    environment:
      - ENABLE_GPU=0
      - TORCH_NUM_THREADS=4
      - OMP_NUM_THREADS=4
    # Healthcheck OHNE curl/wget (Base-Image hat Python sicher an Bord)
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport urllib.request,sys\ntry:\n  urllib.request.urlopen('http://localhost:8080/.well-known/ready', timeout=5).read()\n  sys.exit(0)\nexcept Exception:\n  sys.exit(1)\nPY"]
      interval: 45s
      timeout: 30s
      retries: 25
      start_period: 600s
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: 8G
        reservations:
          memory: 4G
    networks:
      - sdg_internal

  weaviate_service:
    image: semitechnologies/weaviate:1.24.1
    container_name: weaviate_service
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none             # (Variante B unten siehe Hinweis)
      - ENABLE_MODULES=text2vec-transformers
      - TRANSFORMERS_INFERENCE_API=http://weaviate_transformer_service:8080
      - CLUSTER_HOSTNAME=node1
      - DISABLE_TELEMETRY=true
    volumes:
      - ${WEAVIATE_SERVICE_VOLUMES}                # z.B. weaviate_data:/var/lib/weaviate ODER Bind-Mount
    networks:
      - sdg_internal
    depends_on:
      weaviate_transformer_service:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - |
          (command -v curl >/dev/null 2>&1 && \
             (curl -fsS http://localhost:8080/v1/.well-known/ready >/dev/null || \
              curl -fsS http://localhost:8080/.well-known/ready  >/dev/null)) || \
          (command -v wget >/dev/null 2>&1 && \
             (wget -q -O - http://localhost:8080/v1/.well-known/ready >/dev/null || \
              wget -q -O - http://localhost:8080/.well-known/ready  >/dev/null)) || exit 1
      interval: 20s
      timeout: 10s
      retries: 20
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        
  vectorization_service:
    build:
      context: ${SRC_ROOT}
      dockerfile: src/vectorization/Dockerfile
    container_name: vectorization_service
    ports:
      - "8003:8003"
    volumes:
      - ${SRC_ROOT}:/app:ro
      - ${DATA_ROOT}/cache/huggingface:/cache/huggingface
    environment:
      - PYTHONPATH=/app
      - WEAVIATE_URL=${WEAVIATE_URL}
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
      - DATABASE_URL=${DATABASE_URL:-}
      - REDIS_URL=${REDIS_URL}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEPENDENCY_MANAGER_ENABLED=false
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
      - HF_CACHE_DIR=/cache/huggingface
      - HF_HOME=/cache/huggingface
      - TRANSFORMERS_CACHE=/cache/huggingface
      - HF_LOCAL_FILES_ONLY=${HF_LOCAL_FILES_ONLY:-1}
      - SENTENCE_TRANSFORMER_MODEL=${SENTENCE_TRANSFORMER_MODEL:-paraphrase-multilingual-MiniLM-L12-v2}
    depends_on:
      database_service:
        condition: service_healthy
      weaviate_service:
        condition: service_healthy
    command: python -m uvicorn src.vectorization.main:app --host 0.0.0.0 --port 8003
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    networks:
      - sdg_internal
      - sdg_external

  data_retrieval_service:
    build:
      context: ${SRC_ROOT}
      dockerfile: src/data_retrieval/Dockerfile
    container_name: data_retrieval_service
    ports:
      - "8002:8002"
    volumes:
      - ${SRC_ROOT}:/app:ro
      - ${DATA_ROOT}/raw_data:/data/raw_data
      - ${DATA_ROOT}/processed_data:/data/processed_data
    environment:
      - PYTHONPATH=/app
      - DATA_DIR=/data/raw_data
      - PROCESSED_FILE=/data/processed_data/processed_data.json
      - SOURCES_FILE=/app/src/data_retrieval/new_sources.txt
      - SERVICE_HOST=data_retrieval_service
      - SERVICE_PORT=8002
      - SOURCES_FILE=/app/src/data_retrieval/new_sources.txt
      - DATABASE_URL=${DATABASE_URL:-}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    depends_on:
      database_service:
        condition: service_healthy
      db_bootstrap:
        condition: service_completed_successfully
    command: ["python", "-m", "uvicorn", "src.data_retrieval.main:app", "--host", "0.0.0.0", "--port", "8002"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "1.0"
    networks:
      - sdg_internal

  data_processing_service:
    build:
      context: ${SRC_ROOT}
      dockerfile: src/data_processing/Dockerfile
    container_name: data_processing_service
    ports:
      - "8001:8001"
    volumes:
      - ${SRC_ROOT}:/app:ro
      - ${DATA_ROOT}/raw_data:/data/raw_data
      - ${DATA_ROOT}/processed_data:/data/processed_data
      - ${DATA_ROOT}/images:/data/images
      - ${SRC_ROOT}/secrets:/app/secrets:ro
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=${DATABASE_URL:-}
      - RAW_DATA_DIR=/data/raw_data
      - PROCESSED_DATA_DIR=/data/processed_data
      - IMAGES_DIR=/data/images
      - WEAVIATE_URL=${WEAVIATE_URL}
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
      - GDRIVE_ENABLED=1
      - GDRIVE_PARENT_FOLDER_ID=1YL7d4dVC-u9nfmooizYre4WLbVzR0XJ1
      - GDRIVE_SERVICE_ACCOUNT_JSON=${GDRIVE_SERVICE_ACCOUNT_JSON:-/app/secrets/careful-drummer-428510-c0-a89ae27d9b1a.json}
      - GDRIVE_SUBFOLDER_BY_DATE=1
    depends_on:
      database_service:
        condition: service_healthy
      db_bootstrap:
        condition: service_completed_successfully
      weaviate_service:
        condition: service_healthy
      data_retrieval_service:
        condition: service_healthy
    command: python -m uvicorn src.data_processing.main:app --host 0.0.0.0 --port 8001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 45s
      timeout: 20s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: 4G
        reservations:
          cpus: "2"
          memory: 3G
    networks:
      - sdg_internal

  content_extraction_service:
    build:
      context: ${SRC_ROOT}
      dockerfile: src/content_extraction/Dockerfile
    image: sdg_content_extraction:latest
    pull_policy: never
    container_name: content_extraction_service
    restart: unless-stopped
    expose:
      - "8004"
    volumes:
      - ${SRC_ROOT}:/app:ro
      - ${DATA_ROOT}/config:/data/config
      - ${DATA_ROOT}/secrets:/data/secrets
    environment:
      - PYTHONPATH=/app
      - CONFIG_DIR=/data/config
      - SECRET_STORE_DIR=/data/secrets
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@database_service:5432/sdg_pipeline}
      - WEAVIATE_URL=${WEAVIATE_URL}
      - WEAVIATE_TRANSFORMER_URL=http://weaviate_transformer_service:8080
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - SECRET_KEY=${SECRET_KEY}
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      database_service:
          condition: service_healthy
      db_bootstrap:
          condition: service_completed_successfully
    command: python -m uvicorn src.content_extraction.main:app --host 0.0.0.0 --port 8004
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8004/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
    networks:
      - sdg_internal

  pgadmin_service:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_service
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    volumes:
      - ${PGADMIN_VOLUMES}
    depends_on:
      database_service:
        condition: service_healthy
    user: "5050:5050"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    networks:
      - sdg_internal

  weaviate_console:
    image: semitechnologies/weaviate-console
    container_name: weaviate_console
    ports:
      - "3001:3000"
    environment:
      - WEAVIATE_HOST=weaviate_service:8080
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    depends_on:
      weaviate_service:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    networks:
      - sdg_internal

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
      - ${SRC_ROOT}/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - sdg_internal
    environment:
      - REDIS_ARGS=--requirepass ${REDIS_PASSWORD}
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} -h 127.0.0.1 -p 6379 ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  migration_service:
    build:
      context: ${SRC_ROOT}
      dockerfile: src/migration/Dockerfile
    container_name: migration_service
    command: python src/migration/migration_plan.py
    depends_on:
      database_service:
        condition: service_healthy
    environment:
      - MIGRATION_MODE=production
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    networks:
      - sdg_internal

  monitoring_service:
    profiles: ["aux"]
    build:
      context: ${SRC_ROOT}
      dockerfile: src/monitoring/Dockerfile
    container_name: monitoring_service
    ports:
      - "9090:9090"
    volumes:
      - ${SRC_ROOT}:/app/src
      - ${DATA_ROOT}:/app/data
    environment:
      - MIGRATION_MODE=production
      - LOG_LEVEL=INFO
      - PARALLEL_MIGRATIONS=true
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    depends_on:
      - api_service
      - data_processing_service
      - database_service
      - weaviate_service
      - redis
    networks:
      - sdg_internal
      - monitoring_network

  config_service:
    profiles: ["aux"]
    build:
      context: ${SRC_ROOT}
      dockerfile: src/config_manager/Dockerfile
    container_name: config_service
    ports:
      - "8006:8006"
    volumes:
      - ${SRC_ROOT}/config:/app/config
    environment:
      - CONFIG_DIR=/app/config
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    networks:
      - sdg_internal

  error_handler_service:
    profiles: ["aux"]
    build:
      context: ${SRC_ROOT}
      dockerfile: src/error_handler/Dockerfile
    container_name: error_handler_service
    ports:
      - "8007:8007"
    environment:
      - CIRCUIT_BREAKER_THRESHOLD=5
      - RECOVERY_TIMEOUT=60
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    networks:
      - sdg_internal

  url_validator_service:
    profiles: ["aux"]
    build:
      context: ${SRC_ROOT}
      dockerfile: src/url_validator/Dockerfile
    container_name: url_validator_service
    ports:
      - "8008:8008"
    environment:
      - VALIDATION_TIMEOUT=30
      - MAX_FILE_SIZE=52428800
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    networks:
      - sdg_internal

  testing_service:
    build:
      context: ${SRC_ROOT}
      dockerfile: src/testing/Dockerfile
    container_name: testing_service
    profiles: ["testing"]
    command: pytest --cov=src tests/
    volumes:
      - ${SRC_ROOT}:/app
    environment:
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    depends_on:
      database_service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sdg_internal

  backup_service:
    profiles: ["aux"]
    build:
      context: ${SRC_ROOT}
      dockerfile: src/backup/Dockerfile
    container_name: backup_service
    volumes:
      - ${DATA_ROOT}:/data
      - ${BACKUP_ROOT}:/backup
    environment:
      - BACKUP_SCHEDULE=0 2 * * *
      - RETENTION_DAYS=30
      - DEPENDENCY_MANAGER_ENABLED=true
      - HEALTH_CHECK_INTERVAL=60
      - MAX_STARTUP_TIME=300
    networks:
      - sdg_internal

volumes:
  redis_data:
    driver: local

secrets:
  postgres_password:
    file: ${SRC_ROOT}/secrets/postgres_password.txt
  app_db_password:
    file: ${SRC_ROOT}/secrets/app_db_password.txt
  weaviate_api_key:
    file: ${SRC_ROOT}/secrets/weaviate_api_key.txt
